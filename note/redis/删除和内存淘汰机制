一、过期删除策略
1. redis可以通过ex/px，ttl设置超时时间；底层结构有两个字典，一个存放所有的键值对，一个存放设置了超时时间的键值对，所以查询流程就是先查过期字典，不存在再查所有键值对字典，存在再判断是否过期
2. 当key超时时，有三种删除策略
2.1. 定时删除，set key时如果有超时时间，创建一个定时事件，当超时时，事件处理器会处理事件删除key
2.2. 惰性删除，key超时时间到了并不会主动删除，当查询该key检测到超时再删除
2.3. 定期删除，在一定时间，会随机从超时字典里取出一定数量的key，判断是否超时，超时就删除
3. redis采用的惰性删除+定期删除，这里的一定时间、随机抽取的数量可以通过配置，默认是1s十次，每次20个key；并且检测超时key占比，超过25%，继续抽取直到小于25%

二、内存淘汰
1. 内存淘汰是指当内存中数据超过一定大小，会主动将一些key删除
2. 策略有9种
2.1 不内存淘汰，当内存超过阈值时，再修改直接报错，还可以继续删除和查询
2.2 操作过期key
2.2.1 过期key中随机删除一定数量的key
2.2.2 优先淘汰更早超时的key
2.2.3 lru策略
2.2.4 lfu策略
2.3 在所有key中进行删除
2.3.1 随机删除一定数量的key
2.3.2 lru策略
2.3.3 lfu策略
3. lru策略：最近最少使用，普通的lru是用链表将过期key按超时时间插入，但是移动key性能差，redis使用集合来实现近式lru
3.1 redis存在一个全局lru时钟，对象结构体添加了最后一次访问的字段，创建时加入，修改时更新
3.2 进行内存淘汰的时候，会随机选取5个键值对，按最后一次访问排序将最久的键删除
3.3 如果一次读取了大量数据，lru没办法快速淘汰
4. lfu策略：最近最不常用，在lru的基础上加上了频率的概念，结构体将lru的时间字段分为两段，高16位为最后一次访问时间，低8位为访问频率
4.1 访问频率不是访问次数，它会随着时间降低，访问时先做衰减，衰减按访问时间间隔来减少，再做增加，同样也不是单纯+1，是按访问频率来增加，访问频率越高的数据越难增加
4.2 访问频率的衰减速度和增加速度有两个参数配置




